{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MergeSort = () => {\n  _s();\n\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n\n  const display = () => {\n    setTimeout(() => {\n      dispatch({\n        type: \"PLAY\",\n        _play: false\n      });\n      dispatch({\n        type: \"UPDATE_COLOR\",\n        color: \"rgb(0, 182, 0)\"\n      });\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50); //Setting Time complexities\n\n    document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\n    document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n    document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\"; //Setting Space complexity\n\n    document.getElementById(\"Space_Worst\").innerText = \"O(N)\"; //Setting algo name\n\n    document.getElementById(\"algo_name\").innerText = \"Merge Sort\";\n  };\n\n  const mergeSort = (values, ids, timer, l, r) => {\n    if (l >= r) return;\n    let mid = Math.floor((l + r) / 2);\n    mergeSort(values, ids, timer - 1, l, mid);\n    mergeSort(values, ids, timer - 1, mid + 1, r);\n    setTimeout(() => {\n      let color = [];\n\n      for (let i = 0; i < 3; i++) color.push(Math.floor(Math.random() * 200));\n\n      for (let i = l; i <= r; i++) document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\n\n      for (let i = l; i <= r; i++) {\n        for (let j = i + 1; j <= r; j++) {\n          if (values[i] > values[j]) {\n            [values[i], values[j]] = [values[j], values[i]];\n            [ids[i], ids[j]] = [ids[j], ids[i]];\n            let new_ids = [...ids];\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\n          }\n        }\n      }\n    }, timer * myState.speed * 5);\n  };\n\n  const solve = () => {\n    mergeSort(values, ids, Math.ceil(Math.log(values.length + 1)), 0, values.length - 1);\n    display();\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === \"merge\") {\n      if (myState.play) {\n        solve(); //Setting bar colors name\n\n        var select = document.getElementById(\"color\");\n        var value = select.options[select.selectedIndex].value;\n        document.getElementById(\"unsorted_bar_color\").style.background = \"brown\";\n        document.getElementById(\"bar_unsorted\").innerText = \"Dividing\";\n        document.getElementById(\"sorted_bar_color\").style.background = \"green\";\n        document.getElementById(\"bar_sorted\").innerText = \"Sorted\";\n        document.getElementById(\"comparing_bar_color\").style.background = \"purple\";\n        document.getElementById(\"bar_compare\").innerText = \"Comparing\";\n      }\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(MergeSort, \"skz74H6TDd0rxZTKTPFjX8UUY3g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = MergeSort;\nexport default MergeSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"MergeSort\");","map":{"version":3,"sources":["D:/react js course/Sorting Algorithm/src/components/MergeSort.js"],"names":["React","useEffect","useDispatch","useSelector","MergeSort","myState","state","updateProps","dispatch","values","map","item","ids","display","setTimeout","type","_play","color","speed","Math","ceil","log","length","document","getElementById","innerText","mergeSort","timer","l","r","mid","floor","i","push","random","childNodes","style","backgroundColor","j","new_ids","transform","solve","algorithm","play","select","value","options","selectedIndex","background"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACtB,QAAMC,OAAO,GAAGF,WAAW,CAAEG,KAAD,IAAWA,KAAK,CAACC,WAAlB,CAA3B;AACA,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AAEA,MAAIO,MAAM,GAAGJ,OAAO,CAACI,MAAR,CAAeC,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAjC,CAAb;AACA,MAAIC,GAAG,GAAGP,OAAO,CAACI,MAAR,CAAeC,GAAf,CAAoBC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAjC,CAAV;;AAEA,QAAME,OAAO,GAAG,MAAM;AACpBC,IAAAA,UAAU,CAAC,MAAM;AACfN,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,MADC;AAEPC,QAAAA,KAAK,EAAE;AAFA,OAAD,CAAR;AAKAR,MAAAA,QAAQ,CAAC;AACPO,QAAAA,IAAI,EAAE,cADC;AAEPE,QAAAA,KAAK,EAAE;AAFA,OAAD,CAAR;AAID,KAVS,EAUP,IAAIZ,OAAO,CAACa,KAAZ,IAAqB,IAAIC,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASZ,MAAM,CAACa,MAAP,GAAgB,CAAzB,CAAV,CAAzB,IAAmE,EAV5D,CAAV,CADoB,CAapB;;AACAC,IAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,YAAlD;AACAF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,YAApD;AACAF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,GAAiD,YAAjD,CAhBoB,CAkBpB;;AACAF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,SAAvC,GAAmD,MAAnD,CAnBoB,CAqBpB;;AACAF,IAAAA,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCC,SAArC,GAAiD,YAAjD;AACD,GAvBD;;AA0BA,QAAMC,SAAS,GAAG,CAACjB,MAAD,EAASG,GAAT,EAAce,KAAd,EAAqBC,CAArB,EAAwBC,CAAxB,KAA8B;AAC9C,QAAID,CAAC,IAAIC,CAAT,EAAY;AAEZ,QAAIC,GAAG,GAAGX,IAAI,CAACY,KAAL,CAAW,CAACH,CAAC,GAAGC,CAAL,IAAU,CAArB,CAAV;AAEAH,IAAAA,SAAS,CAACjB,MAAD,EAASG,GAAT,EAAce,KAAK,GAAG,CAAtB,EAAyBC,CAAzB,EAA4BE,GAA5B,CAAT;AACAJ,IAAAA,SAAS,CAACjB,MAAD,EAASG,GAAT,EAAce,KAAK,GAAG,CAAtB,EAAyBG,GAAG,GAAG,CAA/B,EAAkCD,CAAlC,CAAT;AAEAf,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIG,KAAK,GAAG,EAAZ;;AACA,WAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EACIf,KAAK,CAACgB,IAAN,CAAWd,IAAI,CAACY,KAAL,CAAWZ,IAAI,CAACe,MAAL,KAAgB,GAA3B,CAAX;;AAEJ,WAAK,IAAIF,CAAC,GAAGJ,CAAb,EAAgBI,CAAC,IAAIH,CAArB,EAAwBG,CAAC,EAAzB,EACET,QAAQ,CAACC,cAAT,CAAwBZ,GAAG,CAACoB,CAAD,CAA3B,EAAgCG,UAAhC,CAA2C,CAA3C,EAA8CC,KAA9C,CAAoDC,eAApD,GAAuE,OAAMpB,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,IAAGA,KAAK,CAAC,CAAD,CAAI,GAA9G;;AAEF,WAAK,IAAIe,CAAC,GAAGJ,CAAb,EAAgBI,CAAC,IAAIH,CAArB,EAAwBG,CAAC,EAAzB,EAA6B;AAC3B,aAAK,IAAIM,CAAC,GAAGN,CAAC,GAAG,CAAjB,EAAoBM,CAAC,IAAIT,CAAzB,EAA4BS,CAAC,EAA7B,EACA;AACE,cAAI7B,MAAM,CAACuB,CAAD,CAAN,GAAYvB,MAAM,CAAC6B,CAAD,CAAtB,EACA;AACE,aAAC7B,MAAM,CAACuB,CAAD,CAAP,EAAYvB,MAAM,CAAC6B,CAAD,CAAlB,IAAyB,CAAC7B,MAAM,CAAC6B,CAAD,CAAP,EAAY7B,MAAM,CAACuB,CAAD,CAAlB,CAAzB;AACA,aAACpB,GAAG,CAACoB,CAAD,CAAJ,EAASpB,GAAG,CAAC0B,CAAD,CAAZ,IAAmB,CAAC1B,GAAG,CAAC0B,CAAD,CAAJ,EAAS1B,GAAG,CAACoB,CAAD,CAAZ,CAAnB;AAEA,gBAAIO,OAAO,GAAG,CAAC,GAAG3B,GAAJ,CAAd;AAEAW,YAAAA,QAAQ,CAACC,cAAT,CAAwBe,OAAO,CAACP,CAAD,CAA/B,EAAoCI,KAApC,CAA0CI,SAA1C,GAAuD,cAAaR,CAAC,GAAG,EAAG,KAA3E;AACAT,YAAAA,QAAQ,CAACC,cAAT,CAAwBe,OAAO,CAACD,CAAD,CAA/B,EAAoCF,KAApC,CAA0CI,SAA1C,GAAuD,cAAaF,CAAC,GAAG,EAAG,KAA3E;AACD;AACF;AACF;AACF,KAvBS,EAuBPX,KAAK,GAAGtB,OAAO,CAACa,KAAhB,GAAwB,CAvBjB,CAAV;AAwBD,GAhCD;;AAiCA,QAAMuB,KAAK,GAAG,MAAM;AAClBf,IAAAA,SAAS,CACPjB,MADO,EAEPG,GAFO,EAGPO,IAAI,CAACC,IAAL,CAAUD,IAAI,CAACE,GAAL,CAASZ,MAAM,CAACa,MAAP,GAAgB,CAAzB,CAAV,CAHO,EAIP,CAJO,EAKPb,MAAM,CAACa,MAAP,GAAgB,CALT,CAAT;AAQAT,IAAAA,OAAO;AACR,GAVD;;AAYAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAII,OAAO,CAACqC,SAAR,KAAsB,OAA1B,EAAmC;AACjC,UAAIrC,OAAO,CAACsC,IAAZ,EAAkB;AAChBF,QAAAA,KAAK,GADW,CAEhB;;AACA,YAAIG,MAAM,GAAGrB,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAb;AACA,YAAIqB,KAAK,GAAGD,MAAM,CAACE,OAAP,CAAeF,MAAM,CAACG,aAAtB,EAAqCF,KAAjD;AAEAtB,QAAAA,QAAQ,CAACC,cAAT,CAAwB,oBAAxB,EAA8CY,KAA9C,CAAoDY,UAApD,GACE,OADF;AAEAzB,QAAAA,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,SAAxC,GAAoD,UAApD;AAEAF,QAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CY,KAA5C,CAAkDY,UAAlD,GAA+D,OAA/D;AACAzB,QAAAA,QAAQ,CAACC,cAAT,CAAwB,YAAxB,EAAsCC,SAAtC,GAAkD,QAAlD;AAEAF,QAAAA,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,EAA+CY,KAA/C,CAAqDY,UAArD,GACE,QADF;AAEAzB,QAAAA,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,SAAvC,GAAmD,WAAnD;AACD;AACF;AACF,GApBQ,EAoBN,CAACpB,OAAO,CAACsC,IAAT,CApBM,CAAT;AAsBA,sBAAO,qCAAP;AACD,CArGD;;GAAMvC,S;UACYD,W,EACCD,W;;;KAFbE,S;AAuGN,eAAeA,SAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst MergeSort = () => {\r\n  const myState = useSelector((state) => state.updateProps);\r\n  const dispatch = useDispatch();\r\n\r\n  let values = myState.values.map((item) => item[0]);\r\n  let ids = myState.values.map((item) => item[1]);\r\n\r\n  const display = () => {\r\n    setTimeout(() => {\r\n      dispatch({\r\n        type: \"PLAY\",\r\n        _play: false,\r\n      });\r\n\r\n      dispatch({\r\n        type: \"UPDATE_COLOR\",\r\n        color: \"rgb(0, 182, 0)\",\r\n      });\r\n    }, 5 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 50);\r\n\r\n    //Setting Time complexities\r\n    document.getElementById(\"Time_Worst\").innerText = \"O(N log N)\";\r\n    document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\r\n    document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\";\r\n\r\n    //Setting Space complexity\r\n    document.getElementById(\"Space_Worst\").innerText = \"O(N)\";\r\n\r\n    //Setting algo name\r\n    document.getElementById(\"algo_name\").innerText = \"Merge Sort\";\r\n  };\r\n\r\n\r\n  const mergeSort = (values, ids, timer, l, r) => {\r\n    if (l >= r) return;\r\n\r\n    let mid = Math.floor((l + r) / 2);\r\n\r\n    mergeSort(values, ids, timer - 1, l, mid);\r\n    mergeSort(values, ids, timer - 1, mid + 1, r);\r\n\r\n    setTimeout(() => {\r\n      let color = [];\r\n      for (let i = 0; i < 3; i++) \r\n          color.push(Math.floor(Math.random() * 200));\r\n\r\n      for (let i = l; i <= r; i++)\r\n        document.getElementById(ids[i]).childNodes[1].style.backgroundColor = `rgb(${color[0]},${color[1]},${color[2]})`;\r\n\r\n      for (let i = l; i <= r; i++) {\r\n        for (let j = i + 1; j <= r; j++) \r\n        {\r\n          if (values[i] > values[j]) \r\n          {\r\n            [values[i], values[j]] = [values[j], values[i]];\r\n            [ids[i], ids[j]] = [ids[j], ids[i]];\r\n\r\n            let new_ids = [...ids];\r\n\r\n            document.getElementById(new_ids[i]).style.transform = `translateX(${i * 11}px)`;\r\n            document.getElementById(new_ids[j]).style.transform = `translateX(${j * 11}px)`;\r\n          }\r\n        }\r\n      }\r\n    }, timer * myState.speed * 5);\r\n  };\r\n  const solve = () => {\r\n    mergeSort(\r\n      values,\r\n      ids,\r\n      Math.ceil(Math.log(values.length + 1)),\r\n      0,\r\n      values.length - 1\r\n    );\r\n\r\n    display();\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (myState.algorithm === \"merge\") {\r\n      if (myState.play) {\r\n        solve();\r\n        //Setting bar colors name\r\n        var select = document.getElementById(\"color\");\r\n        var value = select.options[select.selectedIndex].value;\r\n\r\n        document.getElementById(\"unsorted_bar_color\").style.background =\r\n          \"brown\";\r\n        document.getElementById(\"bar_unsorted\").innerText = \"Dividing\";\r\n\r\n        document.getElementById(\"sorted_bar_color\").style.background = \"green\";\r\n        document.getElementById(\"bar_sorted\").innerText = \"Sorted\";\r\n\r\n        document.getElementById(\"comparing_bar_color\").style.background =\r\n          \"purple\";\r\n        document.getElementById(\"bar_compare\").innerText = \"Comparing\";\r\n      }\r\n    }\r\n  }, [myState.play]);\r\n\r\n  return <></>;\r\n};\r\n\r\nexport default MergeSort;\r\n"]},"metadata":{},"sourceType":"module"}