{"ast":null,"code":"const initial = {\n  algorithm: 'bubble',\n  color: '#35c6ff',\n  speed: 100,\n  range: '30',\n  play: false,\n  values: [],\n  timeouts: [],\n  pause: false,\n  desc: false,\n  search_algo: 'binary',\n  value: ''\n};\n\nconst updateProps = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initial;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'UPDATE_RANGE':\n      {\n        let arr = [];\n\n        for (let i = 0; i < action.range; i++) {\n          arr.push([Math.floor(Math.random() * 100) + 1, i]);\n        }\n\n        return { ...state,\n          range: action.range,\n          values: arr\n        };\n      }\n\n    case 'UPDATE_VALUES':\n      {\n        return { ...state,\n          values: action._values\n        };\n      }\n\n    case 'UPDATE_SPEED':\n      {\n        return { ...state,\n          speed: action.speed\n        };\n      }\n\n    case 'UPDATE_COLOR':\n      {\n        return { ...state,\n          color: action.color\n        };\n      }\n\n    case 'UPDATE_ALGORITHM':\n      {\n        return { ...state,\n          algorithm: action.algorithm\n        };\n      }\n\n    case 'UPDATE_TIEMOUTS':\n      {\n        return { ...state,\n          timeouts: action._timeouts\n        };\n      }\n\n    case 'CHANGE_VALUES':\n      {\n        let arr = [],\n            range = state.range;\n\n        for (let i = 0; i < range; i++) arr.push([Math.floor(Math.random() * 100) + 1, i]);\n\n        return { ...state,\n          values: arr\n        };\n      }\n\n    case 'PLAY':\n      {\n        return { ...state,\n          play: action._play\n        };\n      }\n\n    case 'PAUSE':\n      {\n        return { ...state,\n          pause: action._pause\n        };\n      }\n\n    case 'DESC_ORDER':\n      {\n        return { ...state,\n          desc: action._desc\n        };\n      }\n\n    case 'UPDATE_SEARCH_ALGO':\n      {\n        return { ...state,\n          search_algo: action.search_algo\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default updateProps;","map":{"version":3,"sources":["D:/react js course/Sorting Algorithm/src/reducer/updateProps.js"],"names":["initial","algorithm","color","speed","range","play","values","timeouts","pause","desc","search_algo","value","updateProps","state","action","type","arr","i","push","Math","floor","random","_values","_timeouts","_play","_pause","_desc"],"mappings":"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","sourcesContent":["const initial ={\r\n   algorithm: 'bubble',\r\n   color: '#35c6ff',\r\n   speed: 100,\r\n   range: '30',\r\n   play: false,\r\n   values: [],\r\n   timeouts:[],\r\n   pause: false,\r\n   desc : false,\r\n   search_algo: 'binary',\r\n   value: ''\r\n}\r\nconst updateProps = (state=initial, action) => {\r\n   switch(action.type)\r\n   {\r\n      case 'UPDATE_RANGE':\r\n      {\r\n          let arr=[];\r\n          for(let i = 0; i<action.range; i++)\r\n          {\r\n            arr.push([Math.floor(Math.random()*100)+1, i]);\r\n          }\r\n          return {...state, range: action.range, values: arr};\r\n      }\r\n      case 'UPDATE_VALUES': {\r\n         return {...state,values:action._values};\r\n      }\r\n\r\n      case 'UPDATE_SPEED':{\r\n         return {...state, speed:action.speed};\r\n      }\r\n\r\n      case 'UPDATE_COLOR':{\r\n         return {...state, color:action.color};\r\n      }\r\n\r\n      case 'UPDATE_ALGORITHM':{\r\n         return {...state, algorithm:action.algorithm};\r\n      }\r\n\r\n      case 'UPDATE_TIEMOUTS':{\r\n         return {...state, timeouts:action._timeouts};\r\n      }\r\n\r\n      case 'CHANGE_VALUES':{\r\n         let arr=[], range = state.range;\r\n         for(let i = 0; i < range; i++)\r\n            arr.push([Math.floor(Math.random()*100)+1, i]);\r\n         return {...state,values:arr};\r\n      }\r\n\r\n      case 'PLAY': \r\n      {\r\n         return {...state,play:action._play};\r\n      }\r\n\r\n      case 'PAUSE': \r\n      {\r\n         return {...state,pause:action._pause};\r\n      }\r\n\r\n      case 'DESC_ORDER':\r\n      {\r\n         return {...state, desc:action._desc};\r\n      }  \r\n      \r\n      case 'UPDATE_SEARCH_ALGO':\r\n      {\r\n         return {...state, search_algo:action.search_algo};\r\n      }\r\n      default:\r\n         return state;\r\n   }\r\n}\r\n\r\nexport default updateProps\r\n"]},"metadata":{},"sourceType":"module"}