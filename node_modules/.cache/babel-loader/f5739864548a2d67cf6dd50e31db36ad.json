{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QuickSort = () => {\n  _s();\n\n  const myState = useSelector(state => state.updateProps);\n  const dispatch = useDispatch();\n  let values = myState.values.map(item => item[0]);\n  let ids = myState.values.map(item => item[1]);\n\n  const display = () => {\n    setTimeout(() => {\n      dispatch({\n        type: 'PLAY',\n        _play: false\n      });\n      dispatch({\n        type: 'UPDATE_COLOR',\n        color: 'rgb(0, 182, 0)'\n      });\n    }, 6 * myState.speed * (1 + Math.ceil(Math.log(values.length + 1))) + 100); //Setting Time complexities\n\n    document.getElementById(\"Time_Worst\").innerText = \"O(N^2)\";\n    document.getElementById(\"Time_Average\").innerText = \"Θ(N log N)\";\n    document.getElementById(\"Time_Best\").innerText = \"Ω(N log N)\"; //Setting Space complexity\n\n    document.getElementById(\"Space_Worst\").innerText = \"O(log N)\"; //Setting algo name\n\n    document.getElementById(\"algo_name\").innerText = \"Quick Sort\";\n  };\n\n  const swap = (arr, i, j) => {\n    let temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n  };\n\n  const DescPartition = (values, ids, l, r, timer) => {\n    let pivot = values[l];\n    let i = l;\n\n    for (let j = l + 1; j <= r; j++) {\n      if (values[j] > pivot) {\n        i++;\n        swap(values, i, j);\n        swap(ids, i, j);\n        document.getElementById(ids[i]).style.transform = `translateX(${i * 11}px)`;\n        document.getElementById(ids[j]).style.transform = `translateX(${j * 11}px)`;\n      }\n    }\n\n    swap(values, i, l);\n    swap(ids, i, l);\n    setTimeout(() => {\n      document.getElementById(ids[i + 1]).childNodes[1].style.backgroundColor = 'black';\n      setTimeout(() => {\n        document.getElementById(ids[i + 1]).childNodes[1].style.backgroundColor = 'purple';\n      }, myState.speed * 6 - 10);\n      document.getElementById(ids[l]).style.transform = `translateX(${l * 11}px)`;\n      document.getElementById(ids[i + 1]).style.transform = `translateX(${(i + 1) * 11}px)`;\n    }, myState.speed * timer * 6);\n    return i;\n  };\n\n  const partition = (values, ids, l, r, timer) => {\n    let pivot = values[r];\n    let i = l - 1;\n\n    for (let j = l; j < r; j++) {\n      if (values[j] < pivot) {\n        i++;\n        swap(values, i, j);\n        swap(ids, i, j);\n        document.getElementById(ids[j]).style.transform = `translateX(${j * 11}px)`;\n        document.getElementById(ids[i]).style.transform = `translateX(${i * 11}px)`;\n      }\n    }\n\n    swap(values, r, i + 1);\n    swap(ids, r, i + 1);\n    setTimeout(() => {\n      document.getElementById(ids[i + 1]).childNodes[1].style.backgroundColor = 'black';\n      setTimeout(() => {\n        document.getElementById(ids[i + 1]).childNodes[1].style.backgroundColor = 'purple';\n      }, myState.speed * 6 - 10);\n      document.getElementById(ids[r]).style.transform = `translateX(${r * 11}px)`;\n      document.getElementById(ids[i + 1]).style.transform = `translateX(${(i + 1) * 11}px)`;\n    }, myState.speed * timer * 6);\n    return i + 1;\n  };\n\n  const quickSort = (values, ids, l, r, timer) => {\n    if (myState.desc == true) {\n      if (l < r) {\n        let ind = DescPartition(values, ids, l, r, timer);\n        quickSort(values, ids, l, ind, timer - 1);\n        quickSort(values, ids, ind + 1, r, timer - 1);\n      }\n    } else {\n      if (l < r) {\n        let ind = partition(values, ids, l, r, timer);\n        quickSort(values, ids, l, ind - 1, timer - 1);\n        quickSort(values, ids, ind + 1, r, timer - 1);\n      }\n    }\n  };\n\n  const solve = () => {\n    quickSort(values, ids, 0, values.length - 1, Math.ceil(Math.log(values.length + 1)));\n    display();\n  };\n\n  useEffect(() => {\n    if (myState.algorithm === 'quick') {\n      if (myState.play) {\n        solve(); //Setting bar colors name\n        // var select = document.getElementById(\"color\");\n        // var value = select.options[select.selectedIndex].value;\n\n        document.getElementById(\"unsorted_bar_color\").style.background = 'purple';\n        document.getElementById(\"bar_unsorted\").innerText = \"Swapping\";\n        document.getElementById(\"sorted_bar_color\").style.background = \"green\";\n        document.getElementById(\"bar_sorted\").innerText = \"Sorted\";\n        document.getElementById(\"comparing_bar_color\").style.background = \"black\";\n        document.getElementById(\"bar_compare\").innerText = \"Less than pivot\";\n      }\n    }\n  }, [myState.play]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n\n_s(QuickSort, \"skz74H6TDd0rxZTKTPFjX8UUY3g=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = QuickSort;\nexport default QuickSort;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuickSort\");","map":{"version":3,"sources":["D:/react js course/Sorting Algorithm/src/components/QuickSort.js"],"names":["React","useEffect","useState","useDispatch","useSelector","QuickSort","myState","state","updateProps","dispatch","values","map","item","ids","display","setTimeout","type","_play","color","speed","Math","ceil","log","length","document","getElementById","innerText","swap","arr","i","j","temp","DescPartition","l","r","timer","pivot","style","transform","childNodes","backgroundColor","partition","quickSort","desc","ind","solve","algorithm","play","background"],"mappings":"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","sourcesContent":["import React,{useEffect, useState} from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst QuickSort = () =>{\r\n   const myState = useSelector(state => state.updateProps);\r\n   const dispatch = useDispatch();\r\n\r\n   let values = myState.values.map((item) => item[0]);\r\n   let ids = myState.values.map((item) => item[1]);\r\n   \r\n   const display = () =>{\r\n      setTimeout(() => {\r\n         dispatch({\r\n            type:'PLAY',\r\n            _play:false\r\n         })\r\n\r\n         dispatch({\r\n            type:'UPDATE_COLOR',\r\n            color: 'rgb(0, 182, 0)'\r\n         })\r\n      },6*myState.speed*(1+Math.ceil(Math.log(values.length+1)))+100);\r\n\r\n      //Setting Time complexities\r\n      document.getElementById(\"Time_Worst\").innerText=\"O(N^2)\";\r\n      document.getElementById(\"Time_Average\").innerText=\"Θ(N log N)\";\r\n      document.getElementById(\"Time_Best\").innerText=\"Ω(N log N)\";\r\n\r\n      //Setting Space complexity\r\n      document.getElementById(\"Space_Worst\").innerText=\"O(log N)\";\r\n\r\n      //Setting algo name\r\n      document.getElementById(\"algo_name\").innerText=\"Quick Sort\"\r\n   }\r\n   const swap = (arr,i,j) => {\r\n      let temp = arr[i];\r\n      arr[i] = arr[j];\r\n      arr[j] = temp;\r\n   }\r\n\r\n   const DescPartition = (values, ids, l, r, timer)=>{\r\n      let pivot = values[l];\r\n      let i = l;\r\n      for(let j = l+1; j <= r; j++){\r\n         if(values[j]>pivot){\r\n            i++;\r\n            swap(values,i,j);\r\n            swap(ids,i,j);\r\n            document.getElementById(ids[i]).style.transform = `translateX(${i*11}px)`;\r\n            document.getElementById(ids[j]).style.transform = `translateX(${j*11}px)`;\r\n         }\r\n      }\r\n      swap(values,i,l);\r\n      swap(ids,i,l);\r\n\r\n      setTimeout(() => {\r\n\r\n         document.getElementById(ids[i+1]).childNodes[1].style.backgroundColor = 'black';\r\n         setTimeout(() => {\r\n            document.getElementById(ids[i+1]).childNodes[1].style.backgroundColor = 'purple';\r\n         },myState.speed*6-10)\r\n\r\n         document.getElementById(ids[l]).style.transform = `translateX(${l*11}px)`;\r\n         document.getElementById(ids[i+1]).style.transform = `translateX(${(i+1)*11}px)`;\r\n\r\n      },myState.speed*timer*6);\r\n      return i;\r\n   }\r\n   const partition = (values,ids,l,r,timer) => {\r\n\r\n      let pivot = values[r];\r\n      let i = l-1;\r\n      for(let j = l; j < r; j++){\r\n         if(values[j]<pivot)\r\n         {\r\n            i++;\r\n            swap(values,i,j);\r\n            swap(ids,i,j);\r\n            document.getElementById(ids[j]).style.transform = `translateX(${j*11}px)`;\r\n            document.getElementById(ids[i]).style.transform = `translateX(${i*11}px)`;\r\n         }\r\n      }\r\n      swap(values,r,i+1);\r\n      swap(ids,r, i+1);\r\n\r\n      setTimeout(() => {\r\n\r\n         document.getElementById(ids[i+1]).childNodes[1].style.backgroundColor = 'black';\r\n         setTimeout(() => {\r\n            document.getElementById(ids[i+1]).childNodes[1].style.backgroundColor = 'purple';\r\n         },myState.speed*6-10)\r\n\r\n         document.getElementById(ids[r]).style.transform = `translateX(${r*11}px)`;\r\n         document.getElementById(ids[i+1]).style.transform = `translateX(${(i+1)*11}px)`;\r\n\r\n      },myState.speed*timer*6);\r\n      return i+1;\r\n   }\r\n\r\n   const quickSort = (values,ids,l,r,timer) => {\r\n      if(myState.desc==true)\r\n      {\r\n         if(l<r){\r\n            let ind = DescPartition(values,ids,l,r,timer);\r\n            quickSort(values,ids,l,ind,timer-1);\r\n            quickSort(values,ids,ind+1,r,timer-1);\r\n         }\r\n      }\r\n      else\r\n      {\r\n         if(l<r){\r\n            let ind = partition(values,ids,l,r,timer);\r\n            quickSort(values,ids,l,ind-1,timer-1);\r\n            quickSort(values,ids,ind+1,r,timer-1);\r\n         }\r\n      }     \r\n   }\r\n   \r\n   const solve = () => {\r\n\r\n      quickSort(values,ids,0,values.length-1,Math.ceil(Math.log(values.length+1)));\r\n\r\n      display();\r\n   }\r\n   \r\n   useEffect(() => {\r\n      if(myState.algorithm==='quick'){\r\n         if(myState.play)\r\n         {\r\n            solve();\r\n            //Setting bar colors name\r\n            // var select = document.getElementById(\"color\");\r\n            // var value = select.options[select.selectedIndex].value;\r\n    \r\n            document.getElementById(\"unsorted_bar_color\").style.background = 'purple';\r\n            document.getElementById(\"bar_unsorted\").innerText = \"Swapping\";\r\n    \r\n            document.getElementById(\"sorted_bar_color\").style.background = \"green\";\r\n            document.getElementById(\"bar_sorted\").innerText = \"Sorted\";\r\n    \r\n            document.getElementById(\"comparing_bar_color\").style.background =\"black\";\r\n            document.getElementById(\"bar_compare\").innerText = \"Less than pivot\";\r\n          }\r\n      }\r\n   },[myState.play]);\r\n\r\n   return <></>;\r\n}\r\n\r\nexport default QuickSort;"]},"metadata":{},"sourceType":"module"}